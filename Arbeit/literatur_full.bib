@misc{Hochschulrahmengesetz.1976,
 author = {Hochschulrahmengesetz},
 year = {1976},
 url = {http://www.gesetze-im-internet.de/bundesrecht/hrg/gesamt.pdf}
}


@phdthesis{Hacker.2009,
 abstract = {Thema dieser Arbeit ist die Konzeption der Datenverwaltung eines Systems, welches die R{\"a}umlichkeiten, die organisierten Veranstaltungen und deren Teilnehmer beinhaltet. Zuerst wurde dazu eine allgemeine Theorie erstellt, die die Thematik Rauminformation und Raumverwaltung abstrakt darstellt. Die darauf folgende Analyse der Bedingungen an der Hochschule Neubrandenburg zeigte, dass die Verwaltung durch ein zentrales System erleichtert werden kann. Dies bildet die Grundlage des Vergleiches verschiedener L{\"o}sungsm{\"o}glichkeiten, in dem der Einsatz der Softwarel{\"o}sung HIS der Hochschul Informations System GmbH die besten Erfolgsaussichten bot. Durch eine Testimplementation dieser Software wurde festgestellt, dass diese L{\"o}sung an der Hochschule Neubrandenburg eingesetzt werden kann. Es w{\"u}rde ein funktionierendes zentrales Rauminformations- und -verwaltungssystem darstellen.},
 author = {H{\"a}cker, Jan},
 year = {2009},
 title = {{K}onzeption der {D}atenverwaltung f{\"u}r ein {R}auminformations- und -verwaltungssystem an der {H}ochschule {N}eubrandenburg},
 url = {http://digibib.hs-nb.de/file/dbhsnb\_derivate\_0000000206/Diplomarbeit-Haecker-2009.pdf},
 keywords = {HIS;Raumverwaltung;Informationssystem},
 address = {Neubrandenburg},
 urldate = {11.03.2016},
 publisher = {Fachbereich Landschaftsarchitektur, Geoinformatik, Geod{\"a}sie, Bauingenieurwesen},
 school = {{University of Applied Sciences}}
}


@proceedings{Hellerstein.2010,
 year = {2010},
 title = {{P}roceedings of the 1st {A}{C}{M} {S}ymposium on {C}loud {C}omputing},
 address = {New York and NY and USA},
 publisher = {ACM},
 isbn = {978-1-4503-0036-0},
 series = {{S}o{C}{C} '10},
 editor = {Hellerstein, Joseph M.}
}


@proceedings{IEEEComputerSociety.2007,
 year = {2007},
 title = {{C}omputer {S}oftware and {A}pplications {C}onference: 31st {A}nnual {I}nternational},
 address = {Los Alamitos and CA},
 publisher = {IEEE Computer Society},
 isbn = {9780769528700},
 editor = {{IEEE Computer Society}}
}


@book{Wolff.2016,
 author = {Wolff, Eberhard},
 year = {2016},
 title = {{M}icroservices: {G}rundlagen flexibler {S}oftwarearchitekturen},
 address = {Heidelberg},
 edition = {1.},
 publisher = {dpunkt},
 isbn = {978-3864903137}
}


@proceedings{IEEEComputerSociety.2012,
 year = {2012},
 title = {7th {I}nternational {C}onference on {C}omputer {S}cience {\&} {E}ducation ({I}{C}{C}{S}{E} 2012)},
 address = {Los Alamitos and CA},
 publisher = {IEEE Computer Society},
 editor = {{IEEE Computer Society}}
}


@article{King.2009,
 abstract = {Medical devices historically have been monolithic units -- developed, validated, and approved by regulatory authorities as standalone entities. Modern medical devices increasingly incorporate connectivity mechanisms that offer the potential to stream device data into electronic health records, integrate information from multiple devices into single customizable displays, and coordinate the actions of groups of cooperating devices to realize ``closed loop'' scenarios and automate clinical workflows.
In this paper, we describe a publish-subscribe architecture for medical device integration based on the Java Messaging Service. We provide a overview of a model-based development environment that we have built for rapidly programming device coordination scenarios. We assess the extent to which this framework is capable of supporting and complementing the Integrated Clinical Environment that has been proposed by the Medical Device Plug and Play Interoperability Project The implementation of this framework is freely available and open source. One of the primary goals of the framework is to provide researchers in acadaemia, industry, and government with an open test bed for exploring development, quality assurance, and regulatory issues related to medical device interoperability.},
 author = {King, Andrew and Procter, Sam and Andresen, Dan and Hatcliff, John and Warren, Steve and Spees, William and Jetley, Raoul and Jones, Paul and Weininger, Sandy},
 year = {2009},
 title = {{A} {P}ublish-{S}ubscribe {A}rchitecture and {C}omponent-based {P}rogramming {M}odel for {M}edical {D}evice {I}nteroperability},
 url = {http://sigbed.seas.upenn.edu/archives/2009-07/HatcliffSIGBED.pdf},
 urldate = {31.05.2014}
}


@book{Krafzig.2007,
 author = {Krafzig, Dirk and Banke, Karl and Slama, Dirk},
 year = {2007},
 title = {{E}nterprise {S}{O}{A}: {W}ege und {B}est {P}ractices f{\"u}r serviceorientierte {A}rchitekturen},
 keywords = {Projektmanagement;Serviceorientierte Architektur;Software engineering;Unternehmen},
 address = {Heidelberg},
 edition = {1.},
 publisher = {mitp},
 isbn = {9783826617294}
}


@inproceedings{Liu.2007,
 abstract = {An enterprise service bus (ESB) is a standards-based integration platform that combines messaging, web services, data transformation, and intelligent routing in a highly distributed environment. The ESB has been adopted as a key component of SOA infrastructures. For SOA implementations with large number of users, services, or traffic, maintaining the necessary performance levels of applications integrated using an ESB presents a substantial challenge, both to the architects who design the infrastructure as well as to IT professionals who are responsible for administration. In this paper, we develop a performance model for analyzing and predicting the runtime performance of service applications composed on a COTS ESB platform. Our approach utilizes benchmarking techniques to measure primitive performance overheads of service routing activities in the ESB. The performance characteristics of the ESB and services running on the ESB are modeled in a queuing network, which facilitates the performance prediction of service oriented applications. This model is validated by an example ESB based service application modeled from real world loan broking business application.},
 author = {Liu, Yan and Gorton, Ian and Zhu, Liming},
 title = {{P}erformance {P}rediction of {S}ervice-{O}riented {A}pplications based on an {E}nterprise {S}ervice {B}us},
 pages = {327--334},
 publisher = {IEEE Computer Society},
 isbn = {9780769528700},
 editor = {{IEEE Computer Society}},
 booktitle = {{C}omputer {S}oftware and {A}pplications {C}onference},
 year = {2007},
 address = {Los Alamitos and CA},
 doi = {10.1109/COMPSAC.2007.166}
}


@misc{Liu.2003,
 abstract = {The Internet has changed considerably the scale of distributed systems, motivating the demand for more flexible communication models and systems. Individual point-to-point and synchronous communications, which tend to lead to rigid and static applications, are making way for the more loosely coupled interaction such as is supported by a publish-subscribe paradigm. In this paper, we define a taxonomy for comparing and contrasting publish subscribe systems, citing examples from the systems included in the survey. We then survey existing publish subscribe systems, and discuss their features with respect to the taxonomy. The appendix contains a code example that demonstrates use of a typical publish subscribe system.},
 author = {Liu, Ying and Plale, Beth},
 year = {2003},
 title = {{S}urvey of {P}ublish {S}ubscribe {E}vent {S}ystems},
 url = {http://www.cs.indiana.edu/cgi-bin/techreports/TRNNN.cgi?trnum=TR574},
 urldate = {31.05.2014},
 editor = {{Indiana University}},
 institution = {{IU School of Informatics and Computing---Bloomington}}
}


@inproceedings{Liu.2012,
 author = {Liu, Yimeng and Wang, Yizhi and Jin, Yi},
 title = {{R}esearch on the improvement of {M}ongo{D}{B} {A}uto-{S}harding in cloud environment},
 pages = {851--854},
 publisher = {IEEE Computer Society},
 editor = {{IEEE Computer Society}},
 booktitle = {7th {I}nternational {C}onference on {C}omputer {S}cience {\&} {E}ducation ({I}{C}{C}{S}{E} 2012)},
 year = {2012},
 address = {Los Alamitos and CA},
 doi = {10.1109/ICCSE.2012.6295203}
}


@book{Goring.2009,
 author = {G{\"o}ring, Arne},
 year = {2009},
 title = {{Q}uo vadis {H}ochschulsport? {I}m {W}andel von {H}ochschule und {G}esellschaft},
 address = {G{\"o}ttingen},
 volume = {2},
 publisher = {Univ.-Verl. G{\"o}ttingen},
 isbn = {3940344826},
 series = {{U}niversit{\"a}tsdrucke {G}{\"o}ttingen}
}


@article{Marechaux.2006,
 abstract = {Today's business applications rarely live in isolation. They need to be connected in order to create an integrated solution from which an organization can derive value. Service-Oriented Architecture (SOA) and Event-Driven Architecture (EDA) are two different paradigms that address complex integration challenges. How can organizations choose the better approach to meet their needs? Actually they don't have to choose: an Enterprise Service Bus (ESB) allows for the implementation of both the SOA and the EDA concepts.},
 author = {Mar{\'e}chaux, Jean-Louis},
 year = {2006},
 title = {{C}ombining service-oriented architecture and event-driven architecture using an enterprise service bus},
 pages = {1269--1275},
 journal = {IBM Developer Works}
}


@misc{Menge.2007,
 abstract = {This paper is a comprehensive introduction to the Enterprise Service Bus (ESB), which is a new type of integration infrastructure. Therefore it gives a detailed introduction into the background of Enterprise Application Integration (EAI) and explains Message-Oriented Middleware (MOM) and Service-Oriented Architecture (SOA) which are the technologies the Enterprise Service Bus evolved out of. After discussing core ESB concepts and typical features, the open source ESB solution Mule will be presented. An example application will demonstrate how different features of an ESB are used.},
 author = {Menge, Falko},
 year = {2007},
 title = {{E}nterprise {S}ervice {B}us},
 url = {https://programm.froscon.org/2007/attachments/15-falko\_menge\_-\_enterpise\_service\_bus.pdf},
 urldate = {01.06.2014},
 editor = {{Free and open Source Software Conference}}
}


@inproceedings{Mormann.2013,
 author = {Mormann, Hannah and Willjes, Kristina},
 title = {{O}rganisationsprojekt und {P}rojektorganisation: {S}oftwareeinf{\"u}hrungsprojekte in {H}ochschulen aus einer organisationssoziologischen {P}erspektive},
 pages = {23--42},
 editor = {Stratmann, Friedrich},
 booktitle = {{I}{T} und {O}rganisation in {H}ochschulen},
 year = {2013}
}


@book{Muhl.2006,
 abstract = {The field of event-based systems is surprisingly broad. In many scientific communities,technical talks, commercial products, and industrial projects people think about asynchronous computations and messaging, scalability and maintainability, stepwise evolution and loose coupling. Most likely, these people are discussing event-based systems, even if they use other terms. 
When we began investigating event-based systems some years ago, we were surprised to see that eventing was scattered among many disciplines of computer science. There were no workshops or conferences dedicated to this topic, for example, although many aspects of event-based systems cannot be assessed from a database, network, or software engineering perspective alone. In the same sense, commercially available products that could help solving problems of event-based architectures are often bundled and marketed in solutions of a specific domain. 
In order to channel some of the attention, the Distributed Event-Based Systems (DEBS) workshop series was created. It attracts people from distributed computing, database, and software engineering audiences, and it demonstrates the wide variety of facets event-based systems have. After having heard about and being engaged in interesting discussions about allegedly ``academic'' and ``real-world'' problem, in investigating many findings, and after creating many solutions in both academic and industrial environments, we decided to write this book to present both the current state-of-the-art and its base concepts. 
The book takes a distributed system's point of view. This is, of course, partly due to our own background, but more importantly we believe a solid understanding of distributed event-based systems is a good starting point for building modern computing systems. It lets you integrate sophisticated filter and data processing capabilities as well as new network topologies and routing algorithms.},
 author = {M{\"u}hl, Gero and Fiege, Ludger and Pietzuch, Peter},
 year = {2006},
 title = {{D}istributed event based systems},
 address = {Berlin and Heidelberg and New York},
 publisher = {Springer},
 isbn = {3-540-32651-0}
}


@book{Newman.2015,
 author = {Newman, Sam},
 year = {2015},
 title = {{B}uilding microservices: {D}esigning fine-grained systems},
 address = {Sebastopol and CA and USA},
 edition = {1.},
 publisher = {O'Reilly Media},
 isbn = {978-1491950357}
}


@article{Paluska.,
 abstract = {Users are increasingly inundated with small devices with communication and storage capabilities. Unfortunately, the user is still responsible for reconciling all of the devices whenever a change is made. We present Footloose, a usercentered data store that can share data and reconcile conflicts across diverse devices. Footloose is an optimistic system based on physical eventual consistency---consistency based on the movement of devices---and selective conflict resolution---which allows conflicts to flow through devices that cannot resolve the conflict to devices the can. Using these techniques, Footloose can present consistent views of
data on the devices closest to the user without user interaction.},
 author = {Paluska, Justin Mazzola and Saff, David and Yeh, Tom and Chen, Kathryn},
 title = {{F}ootloose: {A} {C}ase for {P}hysical {E}ventual {C}onsistency and {S}elective {C}onflict {R}esolution},
 url = {http://web.mit.edu/people/jmp/research/footloose-wmcsa.pdf},
 urldate = {31.05.2014}
}


@article{Rajkovic.2013b,
 abstract = {This paper presents major challenges and lessons learned during the process of including and adapting modern medical informatics concepts in challenging circumstances of a health care organization in the Republic of Serbia. The processes of choosing the overall software architecture, application development and later software deployment are examined, and the most critical places (slow network, slow workstations, repetitive data entry, wrong data entered, inappropriate and complex GUI, and low IT knowledge of an end-user) are pointed out, and the general solving strategies are defined. The mentioned strategies are joined together as a general approach for maintaining a complete medical information system life-cycle. Eventually, this approach provides shorter training, efficient support during deployment, more comfortable and efficient work, and makes positive impact on adoption process. In a view of this, our main objective is to specify development and deployment guidelines that can be applied for the information systems developed in different developing countries facing similar problems.},
 author = {Rajkovic, Petar and Jankovic, Dragan and Milenkovic, Aleksandar},
 year = {2013},
 title = {{D}eveloping and deploying medical information systems for {S}erbian public healthcare: {C}hallenges, lessons learned and guidelines},
 pages = {1429--1454},
 volume = {10},
 number = {3},
 issn = {1820-0214},
 journal = {Computer Science and Information Systems},
 doi = {10.2298/CSIS120523056R}
}


@book{Richards.2015,
 author = {Richards, Mark},
 year = {2015},
 title = {{M}icroservices vs. {S}ervice-{O}riented {A}rchitecture},
 address = {Sebastopol},
 publisher = {O'Reilly Media}
}


@misc{Richardson.2014,
 author = {Richardson, Chris},
 year = {2014},
 title = {{P}attern: {M}onolithic {A}rchitecture},
 url = {http://microservices.io/patterns/monolithic.html},
 urldate = {05.07.2016}
}


@book{Sommerville.2007,
 author = {Sommerville, Ian},
 year = {2007},
 title = {{S}oftware-{E}ngineering},
 address = {M{\"u}nchen and Boston [u.a.]},
 edition = {8.},
 publisher = {Pearson Studium},
 isbn = {9783827372574},
 series = {{I}nformatik}
}


@proceedings{Stratmann.2013,
 abstract = {IT und Organisation in Hochschulen | Ausgew{\"a}hlte Beitr{\"a}ge einer HIS-Fachtagung},
 year = {2013},
 title = {{I}{T} und {O}rganisation in {H}ochschulen: {A}usgew{\"a}hlte {B}eitr{\"a}ge einer {H}{I}{S}-{F}achtagung},
 url = {http://www.his-he.de/pdf/pub\_fh/fh-201304.pdf},
 urldate = {31.05.2014},
 editor = {Stratmann, Friedrich}
}


@book{Melzer.2010,
 author = {Melzer, Ingo},
 year = {2010},
 title = {{S}ervice-orientierte {A}rchitekturen mit {W}eb {S}ervices: {K}onzepte - {S}tandards - {P}raxis},
 keywords = {Computer industry;Computer science;Information systems;Software engineering;Text processing (Computer science);Serviceorientierte Architektur;Web Services},
 address = {Heidelberg},
 edition = {4},
 publisher = {Spektrum Akademischer Verlag},
 isbn = {3827425506}
}


@misc{Fowler.2015,
 author = {Fowler, Martin},
 year = {2015},
 title = {{M}icroservices {R}esource {G}uide},
 url = {http://martinfowler.com/microservices},
 urldate = {16.02.2016}
}


@misc{Yang.30.05.2013,
 abstract = {The Architecture and Design of a Publish {\&}amp; Subscribe Messaging System Tailored for Big Data Collecting and Analytics.},
 author = {Yang, William},
 year = {30.05.2013},
 title = {{T}he {A}rchitecture and {D}esign of a {P}ublish {\&} {S}ubscribe {M}essaging {S}ystem {T}ailored for {B}ig {D}ata {C}ollecting and {A}nalytics - {A}bstraction {B}uilder},
 url = {http://bulldog2011.github.io/blog/2013/03/27/the-architecture-and-design-of-a-pub-sub-messaging-system/},
 keywords = {distributed;persistent;pub-sub messaging system},
 urldate = {31.05.2014}
}


@book{Fowler.2003,
 author = {Fowler, Martin},
 year = {2003},
 title = {{P}atterns of enterprise application architecture},
 keywords = {System design;Computer architecture;Application software;Business;Programmatuurtechniek;Bedrijfsorganisatie;Automatisering;T{\'e}cnicas de programa{\c{c}}{\~a}o;Projeto de software (padr{\~o}es);Conception de syst{\`e}mes;Architecture d'ordinateur;Logiciel d'application;D{\'e}veloppement de logiciels;Entreprise;Application industrielle;Anwendungssystem;Objektorientierung;Systementwicklung;Unternehmen},
 address = {Boston},
 publisher = {Addison-Wesley},
 isbn = {9780321127426},
 series = {{T}he {A}ddison-{W}esley signature series}
}


@book{Apelt.2012,
 year = {2012},
 title = {{H}andbuch {O}rganisationstypen},
 keywords = {Organisation;Typologie;Organisationssoziologie},
 address = {Wiesbaden},
 publisher = {Springer VS},
 isbn = {3531933124},
 editor = {Apelt, Maja}
}


@book{Avram.2006,
 abstract = {Software is an instrument created to help us deal with the complexities of our modern life. Software is just the means to an end, and usually that end is something very practical and real. For example, we use software for air traffic control, and this is directly related to the world surrounding us. We want to fly from one place to another, and we do that using sophisticated machineries, so we create software to coordinate the flight of thousands of airplanes which happen to be in the air at any time.
Software has to be practical and useful; otherwise we would not invest so much time and resources into its creation. That makes it extremely connected to a certain aspect of our lives. A useful package of software cannot be decoupled from that sphere of reality, the domain it is supposed to help us manage. On the contrary, the software is deeply entangled with it.
Software design is an art, and like any art it cannot be taught and learned as a precise science, by means of theorems and formulas.
We can discover principles and techniques useful to be applied throughout the process of software creation, but we probably won't ever be able to provide an exact path to follow from the real world need to the code module meant to serve that need. Like a picture or a building, a software product will include the personal touch of those who designed and developed it, something of the  charisma and flair (or the lack of it) of those who contributed to its inception and growth. There are different ways to approach software design. For the last 20 years, the software industry has known and used several methods to create its products, each with its advantages and shortcomings. The purpose of this book is to focus on a design method which has emerged and evolved over the last two decades, but has crystallized more clearly during the last few years: domain-driven design. Eric Evans has made a great
contribution to this subject matter by writing down in one book much of the accumulated knowledge about domain-driven
design. For a more detailed presentation of this topic, we recommend reading his book ``Domain-Driven Design: Tackling
Complexity in the Heart of Software'', published by Addison-Wesley, ISBN: 0-321-12521-5.},
 author = {Avram, Abel and Marinescu, Floyd},
 year = {2006},
 title = {{D}omain-{D}riven {D}esign {Q}uickly: [a summary of {E}ric {E}vans' {D}omain-{D}riven {D}esign]},
 address = {[S.l.]},
 publisher = {C4Media},
 isbn = {978-1-4116-0925-9},
 series = {{I}nfo{Q} : {E}nterprise software development series}
}


@book{Balzert.1996,
 author = {Balzert, Helmut},
 year = {1996},
 title = {{L}ehrbuch der {S}oftware-{T}echnik - {S}oftware-{E}ntwicklung},
 address = {Heidelberg [u.a.]},
 publisher = {Spektrum Akadem. Verl.},
 isbn = {3827400422},
 series = {{L}ehrb{\"u}cher der {I}nformatik}
}


@book{Balzert.19982001,
 author = {Balzert, Helmut},
 year = {1998-2001},
 title = {{L}ehrbuch der {S}oftware-{T}echnik},
 address = {Heidelberg},
 publisher = {Spektrum Akademischer Verlag},
 isbn = {3827400651}
}


@book{Bass.2013,
 author = {Bass, Len and Clements, Paul and Kazman, Rick},
 year = {2013},
 title = {{S}oftware architecture in practice},
 keywords = {Software Architecture;System design;Softwarearchitektur;Systementwurf},
 address = {Upper Saddle River and NJ},
 edition = {3rd ed},
 publisher = {Addison-Wesley},
 isbn = {0321815734},
 series = {{S}{E}{I} series in software engineering}
}


@book{Becker.2011,
 author = {Becker, Alexander},
 year = {2011},
 title = {{N}utzenpotenziale und {H}erausforderungen {S}ervice-orientierter {A}rchitekturen [{E}lektronische {R}essource]   von {A}lexander {B}ecker},
 keywords = {Unternehmen Serviceorientierte Architektur Nutzen Bewertung f Online-Publikation},
 address = {Wiesbaden},
 publisher = {Gabler},
 isbn = {978-3-8349-6228-7}
}


@book{Bengel.2013,
 author = {Bengel, G{\"u}nther},
 year = {2013},
 title = {{G}rundkurs {V}erteilte {S}ysteme: {G}rundlagen und {P}raxis des {C}lient-{S}erver-{C}omputing - {I}nklusive aktueller {T}echnologien wie {W}eb-{S}ervices u. a. - {F}{\"u}r {S}tudenten und {P}raktiker},
 address = {Wiesbaden},
 edition = {4.},
 publisher = {Springer Fachmedien Wiesbaden GmbH},
 isbn = {978-3-8348-1670-2}
}


@book{Brause.2005,
 author = {Brause, R{\"u}diger},
 year = {2005},
 title = {{K}ompendium der {I}nformationstechnologie: {H}ardware, {S}oftware, {C}lient-{S}erver-{S}ysteme, {N}etzwerke, {D}atenbanken},
 address = {Berlin [u.a.]},
 publisher = {Springer},
 isbn = {3-540-20911-5},
 series = {{X}pert.press}
}


@proceedings{Chlamtac.2006,
 year = {2006},
 title = {{P}roceedings of the {F}irst {I}nternational {C}onference on {I}ntegrated {I}nternet {A}d {H}oc and {S}ensor {N}etworks},
 address = {New York and NY and USA},
 publisher = {ACM},
 isbn = {1-59593-427-8},
 series = {{I}nter{S}ense '06},
 editor = {Chlamtac, Imrich}
}


@inproceedings{Bick.2013,
 abstract = {Eine gute IT-Governance kann ma{\ss}geblich zu einer effektiven IT-Infrastruktur und effizienten ITServices beitragen. Dies trifft nicht nur auf Unternehmen, sondern ebenfalls auf Hochschulen zu. Durch den zunehmenden Wettbewerb innerhalb des Hochschulsektors um Personal, Studierende und finanzielle Ressourcen sowie die steigende Erwartungshaltung der Studierenden, aber auch der Mitarbeiterinnen und Mitarbeiter, muss die Hochschulleitung die Umsetzung einer hochschulspezifischen IT-Governance dringend gestalten, bef{\"o}rdern und auch vorleben. Daher ist es Ziel des vorliegenden Beitrags, den Status quo bez{\"u}glich der Umsetzung von IT-Governance-Strukturen in deutschen Hochschulen darzustellen. Hierzu wurde eine umfassende qualitative Studie durchgef{\"u}hrt, deren Ergebnisse im Folgenden pr{\"a}sentiert werden. Eine zentrale Erkenntnis lautet, dass Hochschulen durchaus die Wichtigkeit von IT-Governance erkannt haben, der Umsetzungsprozesssich jedoch erst in einem fr{\"u}hen Stadium befindet.},
 author = {Bick, Markus},
 title = {{Z}wischen {F}achwissen und strategischer {E}ntscheidung: {W}as muss die {H}ochschulleitung {\"u}ber {I}{T} wissen? {C}{I}{O}/{I}{T}-{G}overnance-{M}odelle in deutschen {H}ochschulen},
 pages = {1--22},
 editor = {Stratmann, Friedrich},
 booktitle = {{I}{T} und {O}rganisation in {H}ochschulen},
 year = {2013}
}


@book{Fahlenbock.2010,
 year = {2010},
 title = {{H}ochschulsport-{U}mfrage {N}{R}{W} 2009},
 keywords = {Sportverhalten;Hochschulsport;Online-Befragung},
 address = {Berlin and M{\"u}nster},
 volume = {58},
 publisher = {Lit},
 isbn = {3643106815},
 series = {{S}chriften zur {K}{\"o}rperkultur},
 editor = {Fahlenbock, Michael}
}


@proceedings{.2011,
 year = {2011},
 title = {{N}etworking in {E}ducation and {R}esearch},
 address = {Los Alamitos and CA},
 publisher = {IEEE Computer Society},
 editor = {{IEEE Computer Society}}
}


@phdthesis{Anicic.2011,
 abstract = {Event Processing (EP) is concerned with detection of situations under time constraints that are of a particular business interest. We face today a paradigm shift toward the real time information processing, and EP has therefore spawned significant attention in science and technology. Due to omnipresence of events, EP is becoming a central aspect of new distributed systems such as cloud computing and grid systems, mobile and sensor-based systems, as well as a number of application areas including financial services, business intelligence, social and collaborative networking, click stream analysis and many others.
However, there are a number of issues to be considered in order to enable effective event-based computation. A language for describing event patterns needs to feature a well-defined semantics. It also needs to be rich enough to express important classes of event patterns. Pattern matching should be supported in both, query-driven and eventdriven modes. A number of other event operations, such as event aggregation, filtering, translation, enrichment and splitting, should be supported too. Since EP is a real time
processing task, an EP language needs to feature an efficient execution model. Finally, processing only events is not sufficient in many applications. To detect complex situations of interest, EP needs to be enhanced by background knowledge. This knowledge captures the domain of interest. Its purpose is to be evaluated during detection of events in order to on the fly enrich events with relevant background information; to detect more complex situations; to reason about events and propose certain intelligent recommendations; or to accomplish event classification, clustering, filtering and so forth.
The ETALIS Language for Events (ELE) is a declarative rule-based language for EP. It supports the above mentioned features, and goes beyond the state of the art by providing stream reasoning capabilities. In this thesis, we first review related literature and extract requirements for modern EP systems. Then we present ELE as a novel expressive formalism that fulfils these requirements. Further on, we show how deductive stream reasoning capabilities of ELE, together with its EP capabilities, have the potential to provide powerful real time intelligence. We give a few extensions of the core ELE. A number of examples and use case scenarios are developed to show the power of the proposed EP framework. We provide a prototype implementation of the language, and present evaluation results for implemented scenarios. Finally, we summarise the results of this thesis and outline our view of the emerging future work.},
 author = {Anicic, Darko},
 year = {2011},
 title = {{E}vent {P}rocessing and {S}tream {R}easoning with {E}{T}{A}{L}{I}{S}},
 address = {Karlsruhe},
 urldate = {31.05.2014},
 publisher = {Institut f{\"u}r Angewandte Informatik und Formale Beschreibungsverfahren},
 school = {{Karlsruher Institut f{\"u}r Technologie}}
}


@proceedings{Barolli.2012,
 year = {2012},
 title = {{T}hird {I}nternational {C}onference on {E}merging {I}ntelligent {D}ata and {W}eb {T}echnologies},
 keywords = {Computers;Computer science;World Wide Web;Information technology;Electronic information resources;Expert systems (Computer science);Intelligent agents (Computer software)},
 address = {Los Alamitos and CA},
 publisher = {IEEE Computer Society},
 isbn = {0769547346},
 editor = {Barolli, Leonard}
}


@phdthesis{Bohm.2013,
 abstract = {Immer mehr Unternehmen setzen Software ein, um wiederkehrende Prozesse zu automatisieren. Die Abwicklung von Gesch{\"a}ftsprozessen durch Software ist fur viele Organisationen ein wichtiges Mittel zur Steigerung ihrer Effektivit{\"a}t. Dabei ist es wichtig sicherzustellen, dass die Prozesse und die damit zusammenh{\"a}ngenden Gesch{\"a}ftsregeln korrekt implementiert und auch dokumentiert sind. Heute {\"u}bliche Verfahren wie Unit-Tests sind zwar gut dazu geeignet, diese Regeln zu testen. Zur Erzeugung einer ausf{\"u}hrlichen und f{\"u}r jedermann verst{\"a}ndlichen Dokumentation muss allerdings h{\"a}ufig ein hoher Aufwand betrieben werden. 
Im Folgenden soll ein Verfahren erl{\"a}utert werden, das es erm{\"o}glicht, aussagekr{\"a}ftige Testausgaben und Dokumentationen f{\"u}r die in Software abgebildeten Gesch{\"a}ftsregeln zu erzeugen. Dabei wird auf gro{\ss}e, komplizierte Frameworks verzichtet. Stattdessen wird der Kern der Software, in dem die Gesch{\"a}ftsprozesse abgebildet werden, detaillierter strukturiert. Daraus ergeben sich groe Vorteile bei der Dokumentation der abgebildeten Regeln. {\"A}nderungen werden explizit modelliert, so dass aus ihnen Beschreibungen gewonnen werden k{\"o}nnen.},
 author = {B{\"o}hm, Alexander},
 year = {10.04.2013},
 title = {{T}esten von {D}omain {M}odellen anhand von {C}ommands und {E}vents},
 keywords = {Dokumentation},
 address = {Hagen},
 urldate = {31.05.2014},
 publisher = {Programmiersysteme},
 school = {{FernUni Hagen}}
}


@inproceedings{Boicea.,
 abstract = {This paper presents differences between an SQL database management system - Oracle Database and NoSQL document oriented database management system - MongoDB. Comparison criteria includes theoretical
differences, features, restrictions, integrity, distribution, system requirements, architecture, query and insertion times.},
 author = {Boicea, Alexandru and Radulescu, Florin and Agapin, Laura Ioana},
 title = {{M}ongo{D}{B} vs {O}racle - {D}atabase {C}omparison},
 url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6354766},
 keywords = {instruction, database, nosql, document oriented, function},
 urldate = {31.05.2014},
 pages = {330--335},
 publisher = {IEEE Computer Society},
 isbn = {0769547346},
 editor = {Barolli, Leonard},
 booktitle = {{T}hird {I}nternational {C}onference on {E}merging {I}ntelligent {D}ata and {W}eb {T}echnologies},
 year = {2012},
 address = {Los Alamitos and CA},
 doi = {10.1109/EIDWT.2012.32}
}


@inproceedings{Bonnet.,
 abstract = {Data aggregation is one of the key features used in databases, especially for Business Intelligence (e.g., ETL, OLAP) and analytics/data mining. When considering SQL databases, aggregation is used to prepare and visualize data for deeper analyses. However, these operations are often impossible on very large volumes of data regarding memory-and-time-consumption. In this paper, we show how NoSQL databases such as MongoDB and its key-value stores, thanks to the native MapReduce algorithm, can provide an efficient framework to aggregate large volumes of data. We provide basic material about the MapReduce algorithm, the different NoSQL databases (read intensive vs. write intensive). We investigate how to efficiently modelize the data framework for BI and analytics. For this purpose, we focus on read intensive NoSQL databases using MongoDB and we show how NoSQL and MapReduce can help handling large volumes of data.},
 author = {Bonnet, Laurent and Laurent, Anne and Sala, Michel and Laurent, Benedicte and Sicard, Nicolas},
 title = {{R}educe, {Y}ou {S}ay: {W}hat {N}o{S}{Q}{L} {C}an {D}o for {D}ata {A}ggregation and {B}{I} in {L}arge {R}epositories},
 url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6059864},
 keywords = {Massive Data Sets, Data Aggregation, SQL, NoSQL, MapReduce, Read Intensive, Write Intensive, Mon-goDB},
 urldate = {31.05.2014},
 pages = {483--488},
 publisher = {IEEE Computer Society},
 editor = {Morvan, Franck and Tjoa, A. Min and Wagner, Roland R.},
 booktitle = {22nd {I}nternational {W}orkshop on {D}atabase and {E}xpert {S}ystems {A}pplications},
 year = {2011},
 address = {Los Alamitos and CA},
 doi = {10.1109/DEXA.2011.71}
}


@misc{Browne.09.05.2014,
 abstract = {An explanation of Eric Brewer's CAP theorem, which says you cannot have more than two of Consistency, Availability and Partition-tolerance in web-based distributed systems.},
 author = {Browne, Julian},
 year = {09.05.2014},
 title = {{B}rewer's {C}{A}{P} {T}heorem},
 url = {http://www.julianbrowne.com/article/viewer/brewers-cap-theorem},
 urldate = {11.03.2016}
}


@misc{Chandy.2006,
 abstract = {Folien + Notizen},
 author = {Chandy, Mani K.},
 year = {2006},
 title = {{E}vent-{D}riven {A}pplications: {C}osts, {B}enefits and {D}esign {A}pproaches},
 series = {{G}artner {A}pplication {I}ntegration and {W}eb {S}ervices {S}ummit 2006},
 institutions = {{California Institute of Technology}}
}


@misc{Chang.,
 abstract = {With vast amounts of data in the world, organization becomes a challenge. The success of data driven web services (IMDb, YouTube, Google Maps, Wikipedia, et cetera) all hinge on their ability to present information in an intuitive manner with user friendly interfaces. One area that fails to have such a service is sports statistics. With the ubiquitous appeal of sports, having a solution to this problem can be universally beneficial. Many sites exist that have statistics of different sports, but there are limitations to all of them. Since there is very little continuity among all sports, statistics are represented disparately.
There are several problems with this approach. Any time there needs to be a change to the informational structure, the entire database and interface need to change. In addition, there can never be a single interface if there are different schemas for different sports, leading to a user unfriendly interface.
My system uses a unique schema that is capable of representing statistics from any sport, no matter how unique. Adding new statistics to a sport to reflect rule changes or adding a new sport altogether are seamless. In addition, the web interface is structured by Rails, which changes automatically with the schema. Challenges included developing a universal sports schema and testing it sufficiently enough to prove its generality. Finding and extracting the data to populate the database also presented difficulties.},
 author = {Chang, Lawrence},
 year = {01.06.2014},
 title = {{U}niversal {S}ports {D}atabase},
 url = {http://www.bc.edu/content/dam/files/schools/cas\_sites/cs/local/bach/2008/08LawrenceChang.pdf},
 keywords = {ruby on rails;hpricot;sports;data scrape;scraping;thesis;write up;ruby;rails;database},
 urldate = {01.06.2014}
}


@inproceedings{Cooper.2010,
 abstract = {While the use of MapReduce systems (such as Hadoop) for large scale data analysis has been widely recognized and studied, we have recently seen an explosion in the number of systems developed for cloud data serving. These newer systems address ``cloud OLTP'' applications, though they typically do not support ACID transactions. Examples of systems proposed for cloud serving use include BigTable, PNUTS, Cassandra, HBase, Azure, CouchDB, SimpleDB, Voldemort, and many others. Further, they are being applied to a diverse range of applications that differ considerably from traditional (e.g., TPC-C like) serving workloads. The number of emerging cloud serving systems and the wide range of proposed applications, coupled with a lack of applesto- apples performance comparisons, makes it difficult to understand the tradeoffs between systems and the workloads for which they are suited. We present the Yahoo! Cloud Serving Benchmark (YCSB) framework, with the goal of facilitating performance comparisons of the new generation of cloud data serving systems. We define a core set of benchmarks and report results for four widely used systems: Cassandra, HBase, Yahoo!'s PNUTS, and a simple sharded MySQL implementation. We also hope to foster the development of additional cloud benchmark suites that represent other classes of applications by making our benchmark tool available via open source. In this regard, a key feature of the YCSB framework/tool is that it is extensible---it supports easy definition of new workloads,},
 author = {Cooper, Brian F. and Silberstein, Adam and Tam, Erwin and Ramakrishnan, Raghu and Sears, Russell},
 title = {{B}enchmarking {C}loud {S}erving {S}ystems with {Y}{C}{S}{B}},
 url = {http://doi.acm.org/10.1145/1807128.1807152},
 keywords = {benchmarking;cloud serving database},
 pages = {143--154},
 publisher = {ACM},
 isbn = {978-1-4503-0036-0},
 series = {SoCC '10},
 editor = {Hellerstein, Joseph M.},
 booktitle = {{P}roceedings of the 1st {A}{C}{M} {S}ymposium on {C}loud {C}omputing},
 year = {2010},
 address = {New York and NY and USA},
 doi = {10.1145/1807128.1807152}
}


@book{Evans.2004,
 abstract = {The software development community widely acknowledges that domain modeling is central to software design. Through domain models, software developers are able to express rich functionality and translate it into a software implementation that truly serves the needs of its users. But despite its obvious importance, there are few practical resources that explain how to incorporate effective domain modeling into the software development process.
Domain-Driven Design fills that need. This is not a book about specific technologies. It offers readers a systematic approach to domain-driven design, presenting an extensive set of design best practices, experience-based techniques, and fundamental principles that facilitate the development of software projects facing complex domains. Intertwining design and development practice, this book incorporates numerous examples based on actual projects to illustrate the application of domain-driven design to real-world software development.
Readers learn how to use a domain model to make a complex development effort more focused and dynamic. A core of best practices and standard patterns provides a common language for the development team. A shift in emphasis--refactoring not just the code but the model underlying the code--in combination with the frequent iterations of Agile development leads to deeper insight into domains and enhanced communication between domain expert and programmer. Domain-Driven Design then builds on this foundation, and addresses modeling and design for complex systems and larger organizations.Specific topics covered include:
Getting all team members to speak the same language
Connecting model and implementation more deeply
Sharpening key distinctions in a model
Managing the lifecycle of a domain object
Writing domain code that is safe to combine in elaborate ways
Making complex code obvious and predictable
Formulating a domain vision statement
Distilling the core of a complex domain
Digging out implicit concepts needed in the model
Applying analysis patterns
Relating design patterns to the model
Maintaining model integrity in a large system
Dealing with coexisting models on the same project
Organizing systems with large-scale structures
Recognizing and responding to modeling breakthroughs
With this book in hand, object-oriented developers, system analysts, and designers will have the guidance they need to organize and focus their work, create rich and useful domain models, and leverage those models into quality, long-lasting software implementations.},
 author = {Evans, Eric},
 year = {2004},
 title = {{D}omain-driven design: {T}ackling complexity in the heart of software},
 address = {Boston},
 publisher = {Addison-Wesley},
 isbn = {978-0321125217}
}


@misc{Fitzgerald.2013,
 abstract = {State Machines are a solution to many common programming problems. However, this work argues that the persistence of State Machines, and in particular Event-Driven State Machines, is an area that has had little discussion, and for which more effective enterprise-wide applications could be found. By combining Event Sourcing and the Command Query Command Segregation architectural pattern, an improved method of implementing and persisting State Machines in an enterprise application can be developed. Also, a new Visual Designer is presented that takes advantage of the opportunities raised by Event Sourced State Machines, particularly in the area of real-time debugging, behaviour-driven design and domain-driven design.},
 author = {Fitzgerald, Se{\'a}n},
 year = {2013},
 title = {{A} pattern for state machine persistence using {E}vent {S}ourcing, {C}{Q}{R}{S} and a {V}isual {W}orkbench},
 urldate = {31.05.2014}
}


@article{Floratou.2012,
 abstract = {In this new era of ``big data'', traditional DBMSs are under attack from two sides. At one end of the spectrum, the use of document store NoSQL systems (e.g. MongoDB) threatens to move modern Web 2.0 applications away from traditional RDBMSs. At the other end of the spectrum, big data DSS analytics that used to be the domain of parallel RDBMSs is now under attack by another class of NoSQL data analytics systems, such as Hive on Hadoop. So, are the traditional RDBMSs, aka ``big elephants'', doomed as they are challenged from both ends of this ``big data'' spectrum? In this paper, we compare one representative NoSQL system from each end of this spectrum with SQL Server, and analyze the performance and scalability aspects of each of these approaches
(NoSQL vs. SQL) on two workloads (decision support analysis and interactive data-serving) that represent the two ends of the application spectrum. We present insights from this evaluation and speculate on potential trends for the future.},
 author = {Floratou, Avrilia and Teletia, Nikhil and DeWitt, David J. and Patel, Jignesh M. and Zhang, Donghui},
 year = {2012},
 title = {{C}an the {E}lephants {H}andle the {N}o{S}{Q}{L} {O}nslaught?},
 url = {http://dx.doi.org/10.14778/2367502.2367511},
 pages = {1712--1723},
 volume = {5},
 number = {12},
 issn = {2150-8097},
 journal = {Proc. VLDB Endow.}
}


@misc{Fowler.2011,
 abstract = {LMAX is a new retail financial trading platform. As a result it has to process many trades with low latency. The system is built on the JVM platform and centers on a Business Logic Processor that can handle 6 million orders per second on a single thread. The Business Logic Processor runs entirely in-memory using event sourcing. The Business Logic Processor is surrounded by Disruptors - a concurrency component that implements a network of queues that operate without needing locks. During the design process the team concluded that recent directions in high-performance concurrency models using queues are fundamentally at odds with modern CPU design.},
 author = {Fowler, Martin},
 year = {2011},
 title = {{T}he {L}{M}{A}{X} {A}rchitecture},
 url = {http://martinfowler.com/articles/lmax.html},
 urldate = {11.03.2016}
}


@misc{GameChangerMedia.31.05.2014,
 abstract = {Free scorekeeping and stat software for coaches and teams. Live updates and recaps for parents and fans.},
 author = {GameChanger Media, Inc.},
 year = {31.05.2014},
 title = {{G}ame{C}hanger},
 url = {https://www.gamechanger.io/features},
 urldate = {31.05.2014}
}


@unpublished{GregYoung.,
 author = {{Greg Young}},
 year = {2010},
 title = {{C}{Q}{R}{S} {D}ocuments},
 url = {http://cqrs.files.wordpress.com/2010/11/cqrs\_documents.pdf}
}


@misc{GregYoung.30.05.2014,
 author = {{Greg Young}},
 year = {2010},
 title = {{W}hy use {E}vent {S}ourcing?},
 url = {http://codebetter.com/gregyoung/2010/02/20/why-use-event-sourcing/},
 urldate = {30.05.2014}
}


@phdthesis{Hakim.2012,
 abstract = {Building distributed systems is a complex task, especially when new design patterns appear. Command Query Responsibility Segregation is one of these new patterns, which in its core aims to separate the read
and write side in the system. 
As it happens to be this pattern meshes very well with some other common patterns like event sourcing, eventual consistency and Domain Driven Design. This adds to the complexity of the system, which makes
it more difficult to deem if it is correct or not. This thesis aims to find critical properties that when they are applied to a system it can be said to be correct.
The presence of these properties is showed with a verification model written in Promela and then verified in the tool SPIN. The system however proved to be too complex to prove exhaustively, i.e. mathematical
correctness, and an approximation method had to be employed.
The results shows that the tool indeed was able to show the presence of these critical properties in the model. Using this model as a specification for how messages are passed in the CQRS system makes the system correct. Also this leads to that the correctness properties are present in that system. This thesis has thus helped to reduce the gap between a written specification of a system and a real implementation.},
 author = {Hakim, Kamil},
 year = {2012},
 title = {{C}orrectness for {C}{Q}{R}{S} {S}ystems: {E}licitation and validation},
 address = {Stockholm and SWE},
 urldate = {31.05.2014},
 publisher = {Royal Institute of Technology},
 school = {{KTH Computer Science and Communication}}
}


@misc{Hendrikse.2012,
 abstract = {In this paper we assert that the reason that the development of enterprise web applications often exceeds both time and budget limits is often two-fold: on the one hand layered web application architectures often pose developers as well as architects many technical challenges, on the other hand a proper implementation of an iterative development methodology often fails since a lack of communication frequently hampers an optimal cooperation between business and IT.
In this paper we propose a radically di{\_}erent approach to traditional web application development and the n-layered architecture that is often unconditionally associated with it, as well as the wellknown gap between business and IT. The technical part of our alternative approach is based on a comprehensive domain-driven design that is fully persistence ignorant. This is realized by an implementation of an architectural pattern: command query responsibility segregation (CQRS). An improved communication and subsequent improved collaboration between business and IT is established by the development of a ubiquitous language, which in turn is enabled by the aforementioned domain-driven design.},
 author = {Hendrikse, Z. W. and Molkenboer, K.},
 year = {2012},
 title = {{A} radically different approach to enterprise web application development},
 url = {http://www.codeboys.nl/white-paper.pdf},
 urldate = {01.06.2014}
}


@book{Hohpe.2004,
 abstract = {Would you like to use a consistent visual notation for drawing integration solutions? Look inside the front cover. *Do you want to harness the power of asynchronous systems without getting caught in the pitfalls? See {\dq}Thinking Asynchronously{\dq} in the Introduction. *Do you want to know which style of application integration is best for your purposes? See Chapter 2, Integration Styles. *Do you want to learn techniques for processing messages concurrently? See Chapter 10, Competing Consumers and Message Dispatcher. *Do you want to learn how you can track asynchronous messages as they flow across distributed systems? See Chapter 11, Message History and Message Store. *Do you want to understand how a system designed using integration patterns can be implemented using Java Web services, .NET message queuing, and a TIBCO-based publish-subscribe architecture? See Chapter 9, Interlude: Composed Messaging. Utilizing years of practical experience, seasoned experts Gregor Hohpe and Bobby Woolf show how asynchronous messaging has proven to be the best strategy for enterprise integration success. However, building and deploying messaging solutions presents a number of problems for developers.Enterprise Integration Patterns provides an invaluable catalog of sixty-five patterns, with real-world solutions that demonstrate the formidable of messaging and help you to design effective messaging solutions for your enterprise. The authors also include examples covering a variety of different integration technologies, such as JMS, MSMQ, TIBCO ActiveEnterprise, Microsoft BizTalk, SOAP, and XSL. A case study describing a bond trading system illustrates the patterns in practice, and the book offers a look at emerging standards, as well as insights into what the future of enterprise integration might hold. This book provides a consistent vocabulary and visual notation framework to describe large-scale integration solutions across many technologies. It also explores in detail the advantages and limitations of asynchronous messaging architectures. The authors present practical advice on designing code that connects an application to a messaging system, and provide extensive information to help you determine when to send a message, how to route it to the proper destination, and how to monitor the health of a messaging system.If you want to know how to manage, monitor, and maintain a messaging system once it is in use, get this book.},
 author = {Hohpe, Gregor and Woolf, Bobby},
 year = {2004},
 title = {{E}nterprise integration patterns: {D}esigning, building, and deploying messaging solutions},
 keywords = {Telecommunication;Management information systems},
 address = {Boston},
 publisher = {Addison-Wesley},
 isbn = {9780321200686},
 series = {{T}he {A}ddison-{W}esley signature series}
}


@misc{Jungling.2012,
 abstract = {F{\"u}r die Olympischen Spiele m{\"u}ssen die IT-Systeme auf Attacken vorbereitet sein. Auch bei Start und Ziel muss die Technik funktionieren. {\glqq}Welt Online{\grqq} erkl{\"a}rt die Pr{\"a}zision hinter dem Sport.},
 author = {J{\"u}ngling, Thomas},
 year = {2012},
 title = {{D}as ist die {T}echnik hinter den {O}lympischen {S}pielen},
 url = {http://www.welt.de/wissenschaft/article108399782/Das-ist-die-Technik-hinter-den-Olympischen-Spielen.html},
 keywords = {Omega (Uhren);London 2012;Zeitmessung [ks];Zeitmessungen [ks]},
 urldate = {11.03.2016}
}


@unpublished{Kabbedijk.2012,
 abstract = {In order to maximize their customer base, business software vendors are trying to offer software products that support the business needs of as many customers as possible. The more standardized a software product is, the easier it will be to serve large numbers of uniform customers. However, if customers are not homogeneous, a trade-off must be made between flexibility and complexity. A case study is presented showing the implementation of the Command Query Responsibility Pattern (CQRS), a pattern dictating the strict separation between commands and queries. The study was performed at a large software product vendor currently designing a software product based on CQRS. Seven sub patterns related to CQRS are identified and discussed. The research results show the CQRS pattern is implemented and how its different sub patterns can result in a high level of variability within a software product and how the different sub patterns can interact to achieve this.},
 author = {Kabbedijk, Jaap and Jansen, Slinger and Brinkkemper, Sjaak},
 year = {2012},
 title = {{A} {C}ase {S}tudy of the {V}ariability {C}onsequences of the {C}{Q}{R}{S} {P}attern in {O}nline {B}usiness {S}oftware},
 url = {http://hillside.net/europlop/europlop2012/submission/shepherd.cgi?token=28ba4c725fb24eed97c7f6c82875432e363054ea\&action=download\&label=1375785521\_20},
 keywords = {Case Study;CQRS;Software Pattern;Software Architecture;Variability},
 address = {Kloster Irsee}
}


@phdthesis{Kokko.2013,
 abstract = {This bachelor's thesis, written for Lappeenranta University of Technology and implemented in a medium-sized enterprise (SME), examines a distributed document migration system. The system was created to migrate a large number of electronic documents, along with their metadata, from one document management system to another, so as to enable a rapid switch over of an enterprise resource planning systems inside the company. The paper examines, through theoretical analysis, messaging as a possible enabler of distributing applications and how it naturally fits an event based model, whereby system transitions and states are expressed through recorded behaviours. This is put into practice by analysing the implemented migration systems and how the core components, MassTransit, RabbitMQ and MongoDB, were orchestrated together to realize such a system. As a result, the paper presents an architecture for a scalable and distributed system that could migrate hundreds of thousands of documents over weekend, serving its goals in enabling a rapid system switch over.},
 author = {Kokko, Joona-Pekka},
 year = {2013},
 title = {{D}istributed document migration between {E}{R}{P} systems by means of messaging and event sourcing},
 address = {Lappeenranta},
 urldate = {31.05.2014},
 publisher = {Faculty of Technology Management},
 school = {{University of Technology}}
}


@article{Leavitt.2010,
 abstract = {Many organizations collect vast amounts of customer, scientific, sales, and other data for future analysis. Traditionally, most of these organizations have stored structured data in relational databases for subsequent access and analysis. However, a growing number of developers and users have begun turning to various types of nonrelational, now frequently called NoSQL-databases. Nonrelational databases, including hierarchical, graph, and object-oriented databases-have been around since the late 1960s. However, new types of NoSQL databases are being developed. And only now are they beginning to gain market traction. Different NoSQL databases take different approaches. What they have in common is that they're not relational. Their primary advantage is that, unlike relational databases, they handle unstructured data such as word-processing files, e-mail, multimedia, and social media efficiently. This paper discuss issues such as limitations, advantages, concerns and doubts regarding NoSQL databases.},
 author = {Leavitt, Neal},
 year = {2010},
 title = {{W}ill {N}o{S}{Q}{L} {D}atabases {L}ive {U}p to {T}heir {P}romise?},
 pages = {12--14},
 volume = {43},
 number = {2},
 issn = {0018-9162},
 journal = {Computer},
 doi = {10.1109/MC.2010.58}
}


@misc{MartinFowler.29.05.2014,
 author = {Fowler, Martin},
 year = {29.05.2014},
 title = {{A}nemic {D}omain {M}odel},
 url = {http://www.martinfowler.com/bliki/AnemicDomainModel.html},
 urldate = {30.05.2014}
}


@misc{MartinFowler.29.05.2014b,
 author = {Fowler, Martin},
 year = {29.05.2014},
 title = {{C}ommand {Q}uery {S}eparation},
 url = {http://martinfowler.com/bliki/CommandQuerySeparation.html},
 urldate = {30.05.2014}
}


@proceedings{Morvan.2011,
 year = {2011},
 title = {22nd {I}nternational {W}orkshop on {D}atabase and {E}xpert {S}ystems {A}pplications},
 keywords = {Database management;Expert systems (Computer science)},
 address = {Los Alamitos and CA},
 publisher = {IEEE Computer Society},
 editor = {Morvan, Franck and Tjoa, A. Min and Wagner, Roland R.}
}


@article{Paakkonen.2011,
 author = {P{\"a}{\"a}kk{\"o}nen, Pekka and Pak, Daniel},
 year = {2011},
 title = {{R}eport on {S}calability of database technologies for entertainment services},
 url = {http://virtual.vtt.fi/virtual/nextmedia/Deliverables-2011/D1.2.3.3\_MUMUMESE\_Report\%20on\%20Scalability\%20of\%20database\%20technologies\%20for\%20entertainment\%20services.pdf},
 urldate = {11.03.2016}
}


@inproceedings{Pfisterer.2006,
 author = {Pfisterer, Dennis and Lipphardt, Martin and Buschmann, Carsten and Hellbrueck, Horst and Fischer, Stefan and Sauselin, Jan Hendrik},
 title = {{M}arathon{N}et: {A}dding {V}alue to {L}arge {S}cale {S}port {E}vents - a {C}onnectivity {A}nalysis},
 url = {http://doi.acm.org/10.1145/1142680.1142696,  Titel anhand dieser DOI in Citavi-Projekt übernehmen},
 publisher = {ACM},
 isbn = {1-59593-427-8},
 series = {InterSense '06},
 editor = {Chlamtac, Imrich},
 booktitle = {{P}roceedings of the {F}irst {I}nternational {C}onference on {I}ntegrated {I}nternet {A}d {H}oc and {S}ensor {N}etworks},
 year = {2006},
 address = {New York and NY and USA},
 doi = {10.1145/1142680.1142696}
}


@article{Pritchett.2008,
 abstract = {Web applications have grown in popularity over the past decade. Whether you are building an application for end users or application developers (i.e., services), your hope is most likely that your application will find broad adoption and with broad adoption will come transactional growth. If your application relies upon persistence, then data storage will probably become your bottleneck. There are two strategies for scaling any application. The first, and by far the easiest, is vertical scaling: moving the application to larger computers. Vertical scaling works reasonably well for data but has several limitations. The most obvious limitation is outgrowing the capacity of the largest system available. Vertical scaling is also expensive, as adding transactional capacity usually requires purchasing the next larger system. Vertical scaling often creates vendor lock, further adding to costs.
Horizontal scaling offers more flexibility but is also considerably more complex. Horizontal data scaling can be performed along two vectors. Functional scaling involves grouping data by function and spreading functional groups across databases. Splitting data within functional areas across multiple databases, or sharding, adds the second dimension to horizontal scaling.},
 author = {Pritchett, Dan},
 year = {2008},
 title = {{B}{A}{S}{E}: {A}{N} {A}{C}{I}{D} {A}{L}{T}{E}{R}{N}{A}{T}{I}{V}{E}: {I}n partitioned databases, trading some consistency for availability can lead to dramatic improvements in scalability},
 pages = {48--55},
 volume = {6},
 number = {3},
 issn = {15427730},
 journal = {Queue},
 doi = {10.1145/1394127.1394128}
}


@phdthesis{Rafique.2013,
 abstract = {Today, when businesses and organizations are generating huge volumes of data; the applications like Web 2.0 or social networking requires processing of petabytes of data. Stock Exchange Systems are among the ones that process large amount of quotes and trades on a daily basis. The limited database storage ability is a major bottleneck in meeting up the challenge of providing efficient access to information. 
Further to this, varying data are the major source of information for the financial industry. This data needs to be read and written efficiently in the database; this is quite costly when it comes to traditional Relational Database Management System. RDBMS is good for different scenarios and can handle certain types of data very well, but it isn't always the perfect choice. The existence of innovative architectures allows the storage of large data in an efficient manner. 
``Not only SQL'' brings an effective solution through the provision of an efficient information storage capability. NOSQL is an umbrella term for various new data store. The NOSQL databases have gained popularity due to different factors that include their open source nature, existence of non-relational data store, high-performance, fault-tolerance, and scalability to name a few. Nowadays, NOSQL databases are rapidly gaining popularity because of the advantages that they offer compared to RDBMS.
The major aim of this research is to find an efficient solution for storing and processing the huge volume of data for certain variants. The study is based on choosing a reliable, distributed, and efficient NOSQL database at Cinnober Financial Technology AB. The research majorly explores NOSQL databases and discusses issues with RDBMS; eventually selecting a database, which is best suited for financial data management. It is an attempt to contribute the current research in the field of NOSQL databases which compares one such NOSQL database Apache Cassandra with Apache Lucene and the traditional relational database MySQL for financial management.
The main focus is to find out which database is the preferred choice for different variants. In this regard, the performance test framework for a selected set of candidates has also been taken into consideration.},
 author = {Rafique, Ansar},
 year = {2013},
 title = {{E}valuating {N}{O}{S}{Q}{L} {T}echnologies for {H}istorical {F}inancial {D}ata},
 address = {Uppsala and SWE},
 urldate = {31.05.2014},
 publisher = {Department of Information Technology},
 school = {{Uppsala University}}
}


@article{Rajkovic.2013,
 abstract = {During exploitation of a medical information system dedicated to primary care facilities, we realized that significant amount of often used, but rarely changed data is scattered in large number of data tables requiring many join operations when need to be retrieved. Additionally, in many cases, many data fields are retrieved by select queries and later neither displayed on user interface, nor used in any other way. This situation could be a cause for some performance issues as well as unnecessary increase of data traffic. For this reason we decided to improve our system by applying command-query responsibility segregation (CQRS) pattern with de-normalized read database in order to reduce time and data amount needed for some often executed queries. In read database design process we applied model driven approach and used our existing data modeling, mapping and code generating tools. Also, we developed a synchronization component responsible for migrating data from main to read database based on the existing data replicator. In this paper we present the results on applying this approach mainly on demographic, administrative and partly on medical data. In the near future we plan to extend this approach in our medical information system as much as possible.},
 author = {Rajkovi{\'c}, Petar and Jankovi{\'c}, Dragan and Milenkovi{\'c}, Aleksandar},
 year = {2013},
 title = {{U}sing {C}{Q}{R}{S} {P}attern for {I}mproving {P}erformances in {M}edical {I}nformation {S}ystems}
}


@misc{Rozendaal.13.13.2011,
 abstract = {Currently many business applications are developed using a very database centric approach, often requiring the use of complex and heavy-weight Object-Relational Mappers (ORMs) to make developers productive. Although improvements have been made (through the use of annotations, reflections, conventions) the core issues remain:
Lack of modularity
High coupling to the used ORM and/or underlying database, making it unnecessarily hard to use alternative (NoSQL) or multiple databases
Hard to understand the full application, due to the complexity of the used ORM
Mutability is in-grained, reducing the possibilities for composition and modularity
Limited possibility for abstraction, due to limitations imposed by the ORM on used data types, etc.
In this talk we'll explore the use of an alternative approach using the techniques pioneered by Domain-Driven Design (DDD) and especially Command-Query Responsibility Segregation (CQRS): Event Sourcing.
Using Event Sourcing the application can be split into two parts:
Domain logic responsible for generating events (command side)
Reporting, view, integration, etc. logic that consumes the generated events ({\dq}query{\dq} side).
Through this explicit notion of change (domain events) the developer is put back in control of the application.
Traditional languages such as Java require a lot of ceremony when implementing event sourcing, obscuring the basic simplicity. Using Scala's flexible syntax and support for light-weight classes, immutable data structures and transactional memory only very little support code is needed to build production ready applications using Event Sourcing. We can start simple and scale up to more complexity only when needed. During this talk we'll take a quick tour through the code you might need to get started.
The goals are to make developers productive while keeping applications understandable and maintainable. This is achieved by:
Putting the developer back into control, instead of a framework
Keeping infrastructure concerns out of your domain code
Manage complexity in a scalable manner. Simple functionality ({\dq}CRUD{\dq}) is easy to implement, while allowing a clear path towards complex behavior and implementation
A simple cost model: the cost of generating, storing, and processing events is clear, as is the cost for querying derived data. With relational databases and ORMs costs are much less clear and often highly dependent on external factors such as configuration, table statistics, etc.
Simple, clearly delineated application components that interact through well-defined interfaces, for both infrastructure and domain code
Mostly immutable data structures with mutation controlled by using Scala's software transactional memory
Some of these concepts were first explored in a series of blog posts and was presentated at ScalaDays in 2011 at Standford University in California.},
 author = {Rozendaal, Erik},
 year = {13.13.2011},
 title = {{E}xploring {L}ightweight {E}vent {S}ourcing},
 series = {{G}{O}{T}{O} {A}msterdam 2011}
}


@misc{Savino.2010,
 abstract = {Real-Time {\&}amp; Tornado},
 author = {Savino, Kiril},
 year = {2010},
 title = {{G}ame{C}hanger {M}ongo{N}{Y}{C}},
 url = {http://prezi.com/owkppjicpers/mongonyc/},
 urldate = {31.05.2014}
}


@misc{Savino.31.05.2014,
 abstract = {GameChanger is a giant data pipeline where high throughput on dynamic content is the top priority. We route live sports data in and back out to content generation systems, phones, dynamic web viewers, mobile apps, and email, peaking out at 10s of 1000s of constantly changing data streams. Our play-by-play collection will soon pass 1 billion 1k-sized, sport-variable documents- it's not something you can just query.},
 author = {Savino, Kiril},
 year = {31.05.2014},
 title = {{D}ocument {S}chema {D}esign and {D}ata {C}onsistency},
 url = {http://www.mongodb.com/presentations/MongoNYC-2012/document-schema-design}
}


@misc{Savino.31.05.2014b,
 abstract = {When I'm headed out to meet someone for the first time, I usually send a text or email to the tune of ``I'll be the guy in the GameChanger shirt {\&}amp; blue hat who'll be about 5 minutes late.'' I'm just...},
 author = {Savino, Kiril},
 year = {31.05.2014},
 title = {{G}ame{C}hanger and {M}ongo{D}{B}: a case study in {M}y{S}{Q}{L} conversion},
 url = {http://aurum.tumblr.com/post/1045864983/gamechanger-and-mongodb-a-case-study-in-mysql},
 urldate = {31.05.2014}
}


@misc{SportsStandardsAlliance.31.05.2014,
 author = {{Sports Standards Alliance}},
 year = {31.05.2014},
 title = {{T}he {S}ports {S}tandards {A}lliance},
 url = {http://www.sportsdb.org/sd},
 urldate = {31.05.2014}
}


@phdthesis{Stander.2011,
 abstract = {Datenbanken werden im Computeralltag mittlerweile fl{\"a}chendeckend eingesetzt, u.a. bei:
Desktopapplikationen
Webapplikationen
Enterprisenanwendungen / Gesch{\"a}ftsbetrieb
Privatnutzer
So ist es auch nicht verwunderlich, dass sich mit der gestiegenen Anzahl von Einsatzfeldern auch die Nachfrage zu neuen, flexibleren Datenbanksystemen ge{\"a}ndert hat. Die NoSQL-Bewegung ist - grob zusammengefasst - eine von diesen. Der Name NoSQL steht f{\"u}r not-only-SQL und bedeutet in der Regel, dass neue Ans{\"a}tze bezogen auf die API, Datenverwaltung, Verf{\"u}gbarkeit, Skalierbarkeit und Geschwindigkeit der Datenbanksysteme verfolgt werden. In der Bachelorarbeit m{\"o}chte ich ein herk{\"o}mmliches relationales Datenbanksystem (MySQL) mit einem neunen, nicht-relationalen Datenbanksystem (MongoDB) vergleichen. Beide Datenbanken sind {\"u}ber Open-Source-Lizenzen verf{\"u}gbar, haben eine gro{\ss}e Nutzerzahl (vor allem im Webapplikationsbereich), werden jeweils von einer Firma betreut/vermarktet und werden aktiv weiterentwickelt. Damit soll sichergestellt sein, dass wir hier zwei zeitgem{\"a}{\ss}e Datenbanksysteme vergleichen.
Als Datenmaterial wird die Wikipedia verwendet, da sie zum einen strukturell f{\"u}r eine NoSQLDatenbank pr{\"a}destiniert ist und bis heute offiziell auf einem relationalen Datenbanksystem (MySQL) betrieben wird. Zudem liegen die Datenmengen mit {\"u}ber 2 Millionen Eintr{\"a}gen (entsprechend 7GB an Datenvolumen) in einer {\glqq}businesstauglichen{\grqq} Gr{\"o}{\ss}enordnung und sind freiverf{\"u}gbar.Als non-relationale Datenbank kommt die MongoDB zum Einsatz. Sie ist eine dokumentenbasierte Datenbank mit Eigenschaften einer herk{\"o}mmlichen relationalen Datenbank und deshalb ein ad{\"a}quates Gegenst{\"u}ck zu MySQL. Andere popul{\"a}re NoSQL-Vertreter, wie z.B. CouchDB, sind in ihren Ans{\"a}tzen und Unterschieden wesentlich radikaler. So besitzt die MongoDB ebenfalls Hauptschl{\"u}ssel, Feldindexierung und bietet auch die M{\"o}glichkeit Datens{\"a}tze direkt miteinander verkn{\"u}pfen.
Beim Importvorgang wird f{\"u}r beide Datenbanksysteme jeweils eine angepasste Struktur gew{\"a}hlt, um den abschlie{\ss}enden Geschwindigkeitsvergleich so fair wie m{\"o}glich zu gestalten. Das Ergebnis der Arbeit soll ein {\"u}bersichtlicher Vergleich beider Datenbanksysteme sein. Dabei geht es nicht um das theoretische Aufz{\"a}hlen von Vor- und Nachteilen der jeweiligen Datenbank, sondern um einen praxisnahen Anwendungsfall, der von beiden Datenbanken bew{\"a}ltigt werden muss. Zudem soll gezeigt werden, dass es durchaus Sinn macht, f{\"u}r bestimmte Anwendungszwecke spezielle Datenbanksysteme zu verwenden.},
 author = {St{\"a}nder, Philipp},
 year = {2011},
 title = {{E}in {V}ergleich eines relationalen mit einem non-relationalen {D}atenbanksystems ({M}y{S}{Q}{L} / {M}ongo{D}{B})},
 address = {K{\"o}ln},
 urldate = {11.03.2016},
 publisher = {Institut f{\"u}r Medien- und Phototechnik},
 school = {{Cologne University of Applied Sciences}}
}


@misc{Taube.2012,
 abstract = {The largest energy producers in the US currently operate Demand Response programs totaling more than 31GW of subscribed resources. Many of these programs are operated manually or with very little automation. The recent trend to move to an interoperable Smart Grid has initiated significant efforts to automate a large percentage of the available resources. 
While manual Demand Response already requires good planning, forecasting and data management, automated Demand Response will multiply the need for specific strategy mechanisms based on adequate data management and analytics. Furthermore, automated demand response will provide additional telemetry data which will need to be added to the existing information. 
The proposed paper will discuss advanced data management and analytics as it applies to the needs of fully integrated ADR solutions. It will show the different data sources and characteristics within the ADR framework and derive advanced object-oriented data management concepts applicable for data storage on OpenADR servers. It will become evident how object-oriented data models within the NoSQL data management concept support far better performance in the raw data enhancement process as well as the subsequent data analysis. The paper will show how object-oriented data management allows for fast, effective and reliable data access within the ADR framework and thus supports strategic data usage, program execution as well as the necessary accounting (e.g. billing) in an ADR solution. Last but not least, the paper will explore potential applications of the NoSQL based data management and analysis concept within the ADR framework such as automated fault detection in components and the identification of root causes.},
 author = {Taube, Bert and Bienert, Rolf},
 year = {2012},
 title = {{A}dvanced {D}ata {M}anagement for {A}{D}{R}: {A}dvanced {D}ata {M}anagement and {A}nalytics for {A}utomated {D}emand {R}esponse ({A}{D}{R}) based on {N}o{S}{Q}{L}},
 series = {{G}rid-{I}nterop 2012}
}


@article{Tjondronegoro.2008,
 abstract = {Sport video data is growing rapidly as a result of the maturing digital technologies that support digital video capture, faster data processing, and large storage. However, (1) semi-automatic content extraction and annotation, (2) scalable indexing model, and (3) effective retrieval and browsing, still pose the most challenging problems for maximizing the usage of large video databases. This article will present the findings from a comprehensive work that proposes a scalable and extensible sports video retrieval system with two major contributions in the area of sports video indexing and retrieval. The first contribution is a new sports video indexing model that utilizes semi-schema-based indexing scheme on top of an Object-Relationship approach. This indexing model is scalable and extensible as it enables gradual index construction which is supported by ongoing development of future content extraction algorithms. The second contribution is a set of novel queries which are based on XQuery to generate dynamic and user-oriented summaries and event structures. The proposed sports video retrieval system has been fully implemented and populated with soccer, tennis, swimming, and diving video. The system has been evaluated against 20 users to demonstrate and confirm its feasibility and benefits. The experimental sports genres were specifically selected to represent the four main
categories of sports domain: period-, set-point-, time (race)-, and performance- based sports. Thus, the proposed system should be generic and robust for all types of sports.},
 author = {Tjondronegoro, Dian and Chen, Yi-Ping Phoebe and Joly, Adrien},
 year = {2008},
 title = {{A} scalable and extensible segment-event-object-based sports video retrieval system},
 urldate = {31.05.2014},
 pages = {1--40},
 volume = {4},
 number = {2},
 journal = {ACM Transactions on Multimedia Computing, Communications, and Applications (TOMM)},
 doi = {10.1145/1352012.1352017}
}


@inproceedings{Tudorica.2011,
 author = {Tudorica, Bogdan George and Bucur, Cristian},
 title = {{A} comparison between several {N}o{S}{Q}{L} databases with comments and notes},
 pages = {1--5},
 publisher = {IEEE Computer Society},
 editor = {{IEEE Computer Society}},
 booktitle = {{N}etworking in {E}ducation and {R}esearch},
 year = {2011},
 address = {Los Alamitos and CA},
 doi = {10.1109/RoEduNet.2011.5993686}
}


@misc{vanHoof.2006,
 abstract = {Many people think of SOA as synchronous RPC (mostly over Web services). Others say EDA is SOA. And there are people who say that the best of EDA and SOA is combined in SOA 2.0. But an architectural distinction can be made between a request- and-reply pattern and a publish-and-subscribe pattern. Both patterns are an inverse of each other. Because of the completely different nature and use of the two patterns, it is necessary to be able to distinguish between the both and to name them. You might say making such a distinction is a universal architectural principle. Combining both of the patterns into an increment of the version number of one of them is not a very clever act. It is appropriate and desirable to use the acronyms SOA and EDA to make this distinction, because SOA and EDA are both positioned in the same architectural domain; SOA focusing on (the decomposition of) business functions and EDA focusing on business events. This article explains the differences between the two patterns, when to use the one or the other and how to combine them.},
 author = {van Hoof, Jack},
 year = {2006},
 title = {{H}ow {E}{D}{A} extends {S}{O}{A} and why it is important},
 keywords = {þÿ},
 urldate = {11.03.2016}
}


@article{Radde.1996,
 author = {Radde, Gerlinde},
 year = {1996},
 title = {{H}ochschulsporteinrichtungen - {E}ine vergleichende {B}etrachtung},
 url = {http://www.sportwissenschaft.de/fileadmin/pdf/dvs-Info/1996/1996\_3\_radde.pdf},
 urldate = {05.07.2016},
 pages = {15--17},
 volume = {11},
 number = {3},
 journal = {dvs-Informationen}
}


@misc{Fowler.2010,
 author = {Fowler, Martin},
 year = {2010},
 title = {{R}ichardson {M}aturity {M}odel},
 url = {http://martinfowler.com/articles/richardsonMaturityModel.html},
 urldate = {06.07.2016}
}


